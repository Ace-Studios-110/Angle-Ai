import React from "react";
import ReactMarkdown from "react-markdown";
import remarkGfm from "remark-gfm";

const RoadmapModal: React.FC<{
  open: boolean;
  onClose: () => void;
  plan: string;
  loading?: boolean;
  error?: string;
}> = ({ open, onClose, plan, loading = false, error }) => {
  if (!open) return null;

  const markdownComponents = {
    h1: ({ children }: any) => (
      <h1 className="text-4xl font-bold text-slate-900 mb-6 mt-12 border-b border-slate-200 pb-3">
        {children}
      </h1>
    ),
    h2: ({ children }: any) => (
      <h2 className="text-2xl font-semibold text-slate-800 mt-10 mb-4 border-l-4 border-blue-600 pl-4">
        {children}
      </h2>
    ),
    h3: ({ children }: any) => (
      <h3 className="text-xl font-medium text-slate-700 mt-6 mb-2">{children}</h3>
    ),
    p: ({ children }: any) => (
      <p className="text-slate-700 leading-relaxed mb-4">{children}</p>
    ),
    ul: ({ children }: any) => (
      <ul className="list-disc ml-6 space-y-2 text-slate-700 mb-4">{children}</ul>
    ),
    ol: ({ children }: any) => (
      <ol className="list-decimal ml-6 space-y-2 text-slate-700 mb-4">{children}</ol>
    ),
    li: ({ children }: any) => (
      <li className="leading-relaxed text-slate-700">{children}</li>
    ),
    strong: ({ children }: any) => (
      <strong className="text-slate-900 font-semibold">{children}</strong>
    ),
    blockquote: ({ children }: any) => (
      <blockquote className="border-l-4 border-blue-400 bg-blue-50 p-4 italic rounded-md my-6 text-slate-700">
        {children}
      </blockquote>
    ),
    code: ({ children, inline }: any) =>
      inline ? (
        <code className="bg-gray-100 text-blue-600 px-2 py-1 rounded text-sm font-mono">
          {children}
        </code>
      ) : (
        <pre className="bg-slate-900 text-green-400 p-4 rounded-lg overflow-x-auto text-sm font-mono">
          {children}
        </pre>
      ),
    hr: () => <hr className="my-10 border-slate-300" />,
    table: ({ children }: any) => (
      <div className="overflow-x-auto my-6">
        <table className="min-w-full text-left border border-slate-200 rounded-md shadow-sm">
          {children}
        </table>
      </div>
    ),
    thead: ({ children }: any) => (
      <thead className="bg-slate-100 text-slate-700 text-sm uppercase font-semibold border-b border-slate-200">
        {children}
      </thead>
    ),
    th: ({ children }: any) => <th className="px-4 py-3">{children}</th>,
    td: ({ children }: any) => (
      <td className="px-4 py-3 border-t border-slate-100">{children}</td>
    ),
  };

  return (
    <div className="fixed inset-0 z-50 bg-black/60 backdrop-blur-sm flex items-center justify-center">
      <div className="bg-white rounded-2xl w-[95vw] max-w-5xl h-[90vh] shadow-2xl overflow-hidden flex flex-col">
        {/* Header */}
        <div className="flex items-center justify-between bg-gradient-to-r from-slate-800 to-blue-900 px-6 py-4 text-white">
          <div className="flex items-center space-x-4">
            <div className="w-10 h-10 bg-white/10 rounded-lg flex items-center justify-center text-2xl">üó∫Ô∏è</div>
            <div>
              <h2 className="text-lg font-bold">Startup Roadmap</h2>
              <p className="text-blue-200 text-xs">Generated by Angel AI</p>
            </div>
          </div>
          <button
            onClick={onClose}
            className="hover:bg-white/10 p-2 rounded-full transition"
          >
            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>

        {/* Main Content */}
        <div className="flex-1 overflow-y-auto px-8 py-6">
          {loading ? (
            <div className="h-full flex items-center justify-center text-slate-500">
              ‚è≥ Generating roadmap...
            </div>
          ) : error ? (
            <div className="h-full flex flex-col items-center justify-center space-y-4 text-center">
              <div className="text-5xl">‚ö†Ô∏è</div>
              <h2 className="text-lg font-bold text-slate-800">Generation Error</h2>
              <p className="text-sm text-red-600">{error}</p>
              <button
                onClick={onClose}
                className="mt-3 px-4 py-2 bg-red-600 text-white rounded-lg"
              >
                Close
              </button>
            </div>
          ) : (
            <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-left leading-relaxed space-y-6">
              <ReactMarkdown components={markdownComponents} remarkPlugins={[remarkGfm]}>
                {plan}
              </ReactMarkdown>

              {/* Footer Buttons */}
              <div className="mt-12 flex flex-wrap gap-3 justify-center border-t border-slate-200 pt-6">
                <button className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg shadow-sm">
                  Download PDF
                </button>
                <button className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg shadow-sm">
                  Share Roadmap
                </button>
                <button className="bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-lg shadow-sm">
                  Edit Roadmap
                </button>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default RoadmapModal;
